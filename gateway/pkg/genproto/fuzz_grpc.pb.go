// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: fuzz.proto

package buzz_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FuzzService_Ping_FullMethodName = "/FuzzService/Ping"
)

// FuzzServiceClient is the client API for FuzzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuzzServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
}

type fuzzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFuzzServiceClient(cc grpc.ClientConnInterface) FuzzServiceClient {
	return &fuzzServiceClient{cc}
}

func (c *fuzzServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, FuzzService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuzzServiceServer is the server API for FuzzService service.
// All implementations must embed UnimplementedFuzzServiceServer
// for forward compatibility
type FuzzServiceServer interface {
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	mustEmbedUnimplementedFuzzServiceServer()
}

// UnimplementedFuzzServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFuzzServiceServer struct {
}

func (UnimplementedFuzzServiceServer) Ping(context.Context, *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFuzzServiceServer) mustEmbedUnimplementedFuzzServiceServer() {}

// UnsafeFuzzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuzzServiceServer will
// result in compilation errors.
type UnsafeFuzzServiceServer interface {
	mustEmbedUnimplementedFuzzServiceServer()
}

func RegisterFuzzServiceServer(s grpc.ServiceRegistrar, srv FuzzServiceServer) {
	s.RegisterService(&FuzzService_ServiceDesc, srv)
}

func _FuzzService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuzzServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuzzService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuzzServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FuzzService_ServiceDesc is the grpc.ServiceDesc for FuzzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuzzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FuzzService",
	HandlerType: (*FuzzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FuzzService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fuzz.proto",
}
